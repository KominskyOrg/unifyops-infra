# Frontend App Deployment Values for Auth
# Uses the simplified appType-driven approach
# Usage: helm install auth-app uo-infra-helm/ -f app-values.yaml

# Global configuration
global:
  namespace: "uo-prod"
  imageRegistry: "harbor.unifyops.io/library"
  imagePullSecrets:
    - name: harbor-registry

# Stack configuration - Drives everything
stack:
  name: auth
  appType: app  # Frontend application type

# Main deployment configuration
enabled: true
replicaCount: 3

# Image configuration
image:
  repository: "auth-app"
  tag: "prod-latest"  # Override: --set image.tag=v1.0.0
  pullPolicy: IfNotPresent

# Service configuration
service:
  type: ClusterIP
  port: 3000        # Standard web port
  targetPort: 3000  # Nginx or app server port
  annotations: {}

# Configuration for Frontend App
config:
  # Common config
  apiPort: "3000"  # Frontend usually serves on port 80
  environment: "production"
  
  # App-specific config
  apiUrl: "http://auth-api:8002"
  
  # Additional frontend config
  appTitle: "Auth Management"
  appVersion: "1.0.0"
  featureFlags: "new-ui,dark-mode"
  # Add custom config as needed

# Resources for Frontend (typically lighter than backend)
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 200m
    memory: 256Mi

# Health checks
probes:
  # Startup probe for SPAs that need build time
  startup:
    enabled: true
    httpGet:
      path: "/"
      port: 3000
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 30
  readiness:
    enabled: true
    httpGet:
      path: "/"
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 3
  liveness:
    enabled: true
    httpGet:
      path: "/"
      port: 3000
    initialDelaySeconds: 15
    periodSeconds: 20
    timeoutSeconds: 1
    failureThreshold: 3

# Autoscaling - Usually not needed for frontends
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80

# Observability - Not typically used for frontend apps
observability:
  enabled: false

# Additional environment variables
env:
  - name: NODE_ENV
    value: "production"
  - name: PUBLIC_URL
    value: "/"

# Placement
nodeSelector: {}
tolerations: []
affinity: {}

# Volumes for nginx temporary directories (required for read-only filesystem)
volumes:
  - name: nginx-cache
    emptyDir: {}
  - name: nginx-run
    emptyDir: {}
  - name: nginx-log
    emptyDir: {}

# Volume mounts for nginx directories
volumeMounts:
  - name: nginx-cache
    mountPath: /var/cache/nginx
  - name: nginx-run
    mountPath: /var/run
  - name: nginx-log
    mountPath: /var/log/nginx

# Ingress - Automatically enabled for app appType
ingress:
  enabled: true
  className: "nginx-private"
  annotations:
    nginx.ingress.kubernetes.io/gzip: "true"
    nginx.ingress.kubernetes.io/gzip-types: "text/css text/javascript application/javascript application/json"
  hosts:
    - host: app.unifyops.io
      paths:
        # Auth app serves at root path - handled by Makefile
        - path: /
          pathType: Prefix
  tls:
    - secretName: prod-unifyops-tls
      hosts:
        - app.unifyops.io

# Network policies
networkPolicy:
  enabled: true
  defaultDeny:
    ingress: false  # App needs to accept external traffic
    egress: false   # App needs to call API

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security contexts
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Note: PostgreSQL and Secrets are NOT included for Frontend Apps
# Frontends don't need databases or secrets 
postgresql:
  enabled: false
secrets:
  jwtSecret: ""  # Not used by frontend apps
  existingSecret: ""
  existingSecretJwtKey: "jwt-secret"
database:
  waitForReady: false
  readinessTimeout: 0
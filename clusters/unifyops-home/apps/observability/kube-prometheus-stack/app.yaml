apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  project: infra
  destination:
    server: https://kubernetes.default.svc
    namespace: observability
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: "77.1.0"
    helm:
      skipCrds: true
      values: |
        fullnameOverride: kps

        # --- Prometheus Operator ---
        prometheusOperator:
          enabled: true
          # By default the operator only watches the namespace it runs in.
          # This ensures it watches "observability" where you deploy Prometheus CRs.
          namespaces:
            releaseNamespace: true
          # Extra RBAC rules just in case youâ€™re scraping cluster-wide
          admissionWebhooks:
            enabled: true

        # --- Grafana ---
        grafana:
          enabled: true
          ingress:
            enabled: false   # ingress handled in prom-addons
          persistence:
            enabled: true
            storageClassName: longhorn
            size: 5Gi
          env:
            GF_SERVER_PROTOCOL: http
            GF_SERVER_HTTP_PORT: "3000"
            GF_SERVER_HTTP_ADDR: 0.0.0.0
          additionalDataSources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
            isDefault: false
            jsonData:
              timeout: 60
              maxLines: 1000
              derivedFields:
                - datasourceUid: tempo
                  matcherRegex: "traceID=(\\w+)"
                  name: TraceID
                  url: "$${__value.raw}"
          - name: Tempo
            type: tempo
            access: proxy
            url: http://tempo:3200
            isDefault: false
            jsonData:
              httpMethod: GET
              tracesToLogs:
                datasourceUid: loki
                tags: ["job", "namespace", "pod"]

        # --- Prometheus ---
        prometheus:
          prometheusSpec:
            retention: 15d
            resources:
              limits:
                cpu: 1000m
                memory: 2Gi
              requests:
                cpu: 250m
                memory: 1Gi
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: longhorn
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 20Gi
            # additionalScrapeConfigs:
            #   name: kps-additional-scrape-configs
            #   key: additional-scrape-configs.yaml

        # --- Alertmanager ---
        alertmanager:
          enabled: true
          alertmanagerSpec:
            retention: 120h
            resources:
              limits:
                cpu: 100m
                memory: 256Mi
              requests:
                cpu: 50m
                memory: 128Mi
            storage:
              volumeClaimTemplate:
                spec:
                  storageClassName: longhorn
                  accessModes: ["ReadWriteOnce"]
                  resources: 
                    requests: 
                      storage: 5Gi
          config:
            global:
              resolve_timeout: 5m
            route:
              receiver: 'null'
              group_by: ['alertname','cluster','namespace']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 4h
              routes:
                - receiver: 'null'
                  matchers:
                    - alertname = "InfoInhibitor"
                - receiver: 'critical'
                  matchers:
                    - severity = "critical"
                  continue: true
            receivers:
              - name: 'null'
              - name: 'critical'
                # Add webhook_configs, email_configs, or slack_configs here later

        # --- k3s-friendly: disable unused components ---
        kubeScheduler: { enabled: false }
        kubeControllerManager: { enabled: false }
        kubeProxy: { enabled: false }

    syncPolicy:
      automated: { prune: true, selfHeal: true }
      syncOptions:
        - CreateNamespace=true
        - ServerSideApply=true
